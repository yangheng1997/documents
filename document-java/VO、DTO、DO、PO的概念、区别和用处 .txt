

VO（View Object）：
		视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。

DTO（Data Transfer Object）：
		数据传输对象，这个概念来源于J2EE的设计模式，原来的目的
		是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用
		的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。

DO（Domain Object）：
		领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。

PO（Persistent Object）：
		持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一
		一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应
		PO的一个（或若干个）属性。

DTO和VO：
		DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是
		实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，
		DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。
