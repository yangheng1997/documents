mybatis 的批量操作。
	简单的批量操作，引用了foreach语句。注意，传入的参数只能是一个数据。
		普通的delete语句
			<delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
			parameterType ：参数类型。


	1、array数组的批量操作。
		案例
		Mapper.java 	接口
			public int batchDel(String[] Strings);
			
		Mapper.xml		mybatis的映射文件
		
			<delete id="batchDel" >
				delete tables 表名  where id in 
				 <foreach collection="array" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>>
			</delete>
		
		
			
			
	2、list集合批量操作
		案例
		Mapper.java 接口
			public int batchDel(List<Integer> list);
		
		Mapper.xml 	mybatis的映射文件
			
			<delete id="batchDel" >
				delete tables 表名  where id in 
				 <foreach collection="list" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>>
			</delete>
			
	
	3、map集合批量操作
		案例
		Service 的代码
		
			Map map =new HashMap<>();
			map.put("ids", ids);
			map.put("status", 1);
			return itemService.batchReshelfandInstock(map);
		
		Mapper.java 接口
			public int batchDel(Map map);
		
		Mapper.xml 	mybatis的映射文件
			<update id="batchReshelfandInstock">
				update tb_item 
					set status= #{status}
				where id in 
					<foreach collection="ids" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
			</update>
			
			
foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach元素的属性主要有 item，index，collection，open，separator，close。item表示集合中每一个元素进行迭代时的别名，index指 定一个名字，用于表示在迭代过程中，每次迭代到的位置，open表示该语句以什么开始，separator表示在每次进行迭代之间以什么符号作为分隔 符，close表示以什么结束，在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，主要有一下3种情况：

	1、如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
    2、如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
    3、如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在breast里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key

	
	
参考地址 
http://www.cnblogs.com/exmyth/p/5757137.html