iptables的工作机制
		1.PREROUTING (路由前)		proeroutinc
		2.INPUT (数据包流入口)		input
		3.FORWARD (转发管卡)		forward
		4.OUTPUT(数据包出口)		output
		5.POSTROUTING（路由后）		postrouting
        这是NetFilter规定的五个规则链，任何一个数据包，只要经过本机，必将经过这五个链中的其中一个链。

防火墙的策略

		防火墙策略一般分为两种，一种叫“通”策略，一种叫“堵”策略，通策略，默认门是关着的，必须要定义谁能进。
	堵策略则是，大门是洞开的，但是你必须有身份认证，否则不能进。
	所以我们要定义，让进来的进来，让出去的出去，所以通，是要全通，而堵，则是要选择。
	当我们定义的策略的时候，要分别定义多条功能，其中：定义数据包中允许或者不允许的策略，
	filter过滤的功能，而定义地址转换的功能的则是nat选项。为了让这些功能交替工作，
	我们制定出了“表”这个定义，来定义、区分各种不同的工作功能和处理方式。

	
	
iptables 禁止端口和开放端口

1.首先介绍一下指令和相关配置文件

    启动指令:service iptables start   
    重启指令:service iptables restart   
    关闭指令:service iptables stop   
      
    然后是相关配置:/etc/sysconfig/iptables   
    如何操作该配置呢？   
    vim /etc/sysconfig/iptables   
    然后进去修改即可，修改完了怎么办？这里很多人会想到/etc/rc.d/init.d/iptables save指令，但是一旦你这么干了你刚才的修改内容就白做了。。。   
    具体方法是：   
    只修改/etc/sysconfig/iptables 使其生效的办法是修改好后先service iptables restart，然后才调用/etc/rc.d/init.d/iptables save，   
    因为/etc/rc.d/init.d/iptables save会在iptables服务启动时重新加载，要是在重启之前直接先调用了/etc/rc.d/init.d/iptables save那么你   
    的/etc/sysconfig/iptables 配置就回滚到上次启动服务的配置了，这点必须注意！！！  

2.下面介绍一些指令用法（主要还是man iptables看下相关资料才行）

    -A：指定链名   
    -p：指定协议类型   
    -d：指定目标地址   
    --dport：指定目标端口（destination port 目的端口）   
    --sport：指定源端口（source port 源端口）   
    -j：指定动作类型  

3.如果我不像修改文件直接打命令可以吗，当然没问题，步骤如下:

    例如我给SSH加放行的语句：   
    添加input记录： iptables -A INPUT -p tcp --dport 22 -j ACCEPT   
    添加output记录： iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT   
    最后注意需要再执行一下 /etc/init.d/iptables save，这样这两条语句就保存到刚才那个/etc/sysconfig/iptables 文件中了。  

4.接下来说明一下步骤，如果机器不在我身边，我只能SSH进去做iptables规则，那么我必须注意每一步，千万别搞错了，否则就SSH链接不上都有可能！

    首先要做的是给咱的SSH进行ACCEPT配置，以免直接无法连接的情况发生:   
    1.如果SSH端口是22（这里不建议用默认端口最好改掉SSH端口）   
    iptables -A INPUT -p tcp --dport 22 -j ACCEPT   
    iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT   
    注意要/etc/rc.d/init.d/iptables save，以下每一步都最好执行一遍此语句，以下不再累述。   
      
    2.vim /etc/sysconfig/iptables确定是否已经加入配置，可以的话执行service iptables restart重启后生效   
      
    3.下面是很危险的操作，如果你第一步没做就会直接可能导致你连不上SSH，此步骤前切记执行第一步！！！   
    iptables -P INPUT DROP    
    iptables -P OUTPUT DROP    
    iptables -P FORWARD DROP   
    这个步骤是把所有不符合自己配置的规则ACCEPT的连接全部DROP掉，执行完以后如果咱SSH还没掉，那么谢天谢地，安全了，重启下iptables后继续下面的配置！   
      
    4.下面咱就不细说了，具体就是看自己服务器要开放哪些端口或者是要访问哪些端口来做具体的配置，下面是我自己的机器的配置：   
      
    /etc/sysconfig/iptables文件配置如下:   
    # Generated by iptables-save v1.4.7 on Fri Mar  2 19:59:43 2012   
    *filter   
    :INPUT DROP [0:0]   
    :FORWARD DROP [0:0]   
    :OUTPUT DROP [8:496]   
    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT   
    #ping使用的端口   
    -A INPUT -p icmp -j ACCEPT   
    -A INPUT -i lo -j ACCEPT   
    -A INPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT   
    -A INPUT -s 192.168.2.200/32 -d 192.168.2.200/32 -j ACCEPT   
    #允许服务器自己的SSH（对外部请求来说服务器是目标所以使用--dport）   
    -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT   
    #80端口不用说了吧，服务器网站访问端口   
    -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT   
    -A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT   
    -A INPUT -p tcp -m tcp --dport 11211 -j ACCEPT   
    -A INPUT -p tcp -m tcp --dport 11212 -j ACCEPT   
    -A FORWARD -j REJECT --reject-with icmp-host-prohibited   
    #53端口是DNS相关，TCP和UDP都要配置   
    -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT   
    -A INPUT -p udp -m udp --dport 53 -j ACCEPT   
    #ping使用的端口   
    -A OUTPUT -p icmp -j ACCEPT   
    -A OUTPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT   
    -A OUTPUT -s 192.168.2.200/32 -d 192.168.2.200/32 -j ACCEPT   
    #允许服务器SSH到其他机器（使用外部端口就使用--dport）   
    -A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT   
    #允许服务器自己的SSH（自已为源输出就使用--sport）   
    -A OUTPUT -p tcp -m tcp --sport 22 -j ACCEPT   
    #访问外部网站80端口（使用外部端口就使用--dport）   
    -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT   
    #如果服务器需要访问外部网站，那么OUTPUT也需要配置53端口（使用外部端口就使用--dport）   
    -A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT   
    -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT   
    #如果有访问外部邮箱，那么打开邮箱相关端口（使用外部端口就使用--dport）   
    -A OUTPUT -p tcp -m tcp --dport 465 -j ACCEPT   
    -A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT   
    -A OUTPUT -p tcp -m tcp --dport 110 -j ACCEPT   
    #服务器网站访问端口（自已为源输出就使用--sport）   
    -A OUTPUT -p tcp -m tcp --sport 80 -j ACCEPT   
    -A OUTPUT -p tcp -m tcp --sport 3306 -j ACCEPT   
    -A OUTPUT -p tcp -m tcp --sport 11211 -j ACCEPT   
    -A OUTPUT -p tcp -m tcp --sport 11212 -j ACCEPT   
    COMMIT   
    # Completed on Fri Mar  2 19:59:43 2012  

5.可能有时候需要删除规则，最简单就是修改一下/etc/sysconfig/iptables然后service iptables restart,最后/etc/rc.d/init.d/iptables save即可。

当然也可以使用指令完成:

    在网上找了一下，删除规则的方法：   
    语法是： iptables -D chain rulenum [options]   
    其中： chain 是链的意思，就是INPUT FORWARD 之类的   
                 rulenum 是规则的编号。从1 开始。可以使用  --line-numbers 列出规则的编号   
        
    所以，例如上面要删除一个INPUT链的规则的话可以这样：iptables -D INPUT 3   
    意思是删除第3条规则。   
    还有第二种方法。第二种办法是 -A 命令的映射，不过用-D替换-A。当你的链中规则很复杂，而你不想计算它们的编号的时候这就十分有用了。也就是说，你如何用iptables -A.... 语句定义了一个规则，则删除此规则时就用 -D 来代替- A  其余的都不变即可。   
    ======================   
    说一下上面的 --line-numbers 选项，如下面的命令：   
    iptables -L INPUT --line-numbers   列出INPUT 链所有的规则   
    num  target     prot opt source               destination            
    1    REJECT     tcp  --  anywhere             anywhere            tcp dpt:microsoft-ds reject-with icmp-port-unreachable   
    2    REJECT     tcp  --  anywhere             anywhere            tcp dpt:135 reject-with icmp-port-unreachable   
    3    REJECT     tcp  --  anywhere             anywhere            tcp dpt:netbios-ssn reject-with icmp-port-unreachable   
      
    ...   
    ...   
    删除指定行规则：   
    [root@localhost rc.d]# iptables -D INPUT 4  

  6.最后补充一下，如果想针对某IP进行单独开放端口可以如下配置：

    如果我需要对内网某机器单独开放mysql端口，应该如下配置：   
    iptables -A INPUT -s 192.168.2.6 -p tcp -m tcp --dport 3306 -j ACCEPT   
    iptables -A OUTPUT -s 192.168.2.6 -p tcp -m tcp --sport 3306 -j ACCEPT  

7.彻底禁止某IP访问:

    #屏蔽单个IP的命令是   
    iptables -I INPUT -s 123.45.6.7 -j DROP   
    #封整个段即从123.0.0.1到123.255.255.254的命令   
    iptables -I INPUT -s 123.0.0.0/8 -j DROP   
    #封IP段即从123.45.0.1到123.45.255.254的命令   
    iptables -I INPUT -s 124.45.0.0/16 -j DROP   
    #封IP段即从123.45.6.1到123.45.6.254的命令是   
    iptables -I INPUT -s 123.45.6.0/24 -j DROP   
    指令I是insert指令 但是该指令会insert在正确位置并不像A指令看你自己的排序位置，因此用屏蔽因为必须在一开始就要加载屏蔽IP，所以必须使用I命令加载，然后注意执行/etc/rc.d/init.d/iptables save进行保存后重启服务即可  

1、关闭所有的 INPUT FORWARD OUTPUT 只对某些端口开放。
下面是命令实现：

iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP

再用命令 iptables -L -n 查看 是否设置好， 好看到全部 DROP 了
这样的设置好了，我们只是临时的， 重启服务器还是会恢复原来没有设置的状态
还要使用 service iptables save 进行保存
看到信息 firewall rules 防火墙的规则 其实就是保存在 /etc/sysconfig/iptables
可以打开文件查看 vi /etc/sysconfig/iptables
2、
下面我只打开22端口，看我是如何操作的，就是下面2个语句

iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT

再查看下 iptables -L -n 是否添加上去, 看到添加了

Chain INPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0           tcp dpt:22

Chain FORWARD (policy DROP)
target     prot opt source               destination

Chain OUTPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0           tcp spt:22

现在Linux服务器只打开了22端口，用putty.exe测试一下是否可以链接上去。
可以链接上去了，说明没有问题。

最后别忘记了保存 对防火墙的设置
通过命令：service iptables save 进行保存

iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
针对这2条命令进行一些讲解吧
-A 参数就看成是添加一条 INPUT 的规则
-p 指定是什么协议 我们常用的tcp 协议，当然也有udp 例如53端口的DNS
到时我们要配置DNS用到53端口 大家就会发现使用udp协议的

而 --dport 就是目标端口 当数据从外部进入服务器为目标端口
反之 数据从服务器出去 则为数据源端口 使用 --sport

-j 就是指定是 ACCEPT 接收 或者 DROP 不接收
3、禁止某个IP访问
1台Linux服务器,2台windows xp 操作系统进行访问
Linux服务器ip 192.168.1.99
xp1 ip: 192.168.1.2
xp2 ip: 192.168.1.8

下面看看我2台xp 都可以访问的

192.168.1.2 这是 xp1 可以访问的，
192.168.1.8 xp2 也是可以正常访问的。

那么现在我要禁止 192.168.1.2 xp1 访问， xp2 正常访问，
下面看看演示

通过命令 iptables -A INPUT -p tcp -s 192.168.1.2 -j DROP
这里意思就是 -A 就是添加新的规则， 怎样的规则呢？ 由于我们访问网站使用tcp的，
我们就用 -p tcp , 如果是 udp 就写udp，这里就用tcp了， -s就是 来源的意思，
ip来源于 192.168.1.2 ，-j 怎么做 我们拒绝它 这里应该是 DROP

好，看看效果。好添加成功。下面进行验证 一下是否生效

一直出现等待状态 最后 该页无法显示 ，这是 192.168.1.2 xp1 的访问被拒绝了。

再看看另外一台 xp 是否可以访问， 是可以正常访问的 192.168.1.8 是可以正常访问的
4、如何删除规则
首先我们要知道 这条规则的编号，每条规则都有一个编号

通过 iptables -L -n --line-number 可以显示规则和相对应的编号
num target     prot opt source               destination
1    DROP       tcp -- 0.0.0.0/0            0.0.0.0/0           tcp dpt:3306
2    DROP       tcp -- 0.0.0.0/0            0.0.0.0/0           tcp dpt:21
3    DROP       tcp -- 0.0.0.0/0            0.0.0.0/0           tcp dpt:80
多了 num 这一列， 这样我们就可以 看到刚才的规则对应的是 编号2

那么我们就可以进行删除了
iptables -D INPUT 2
删除INPUT链编号为2的规则。

再 iptables -L -n 查看一下 已经被清除了。
5、过滤无效的数据包
假设有人进入了服务器，或者有病毒木马程序，它可以通过22，80端口像服务器外传送数据。
它的这种方式就和我们正常访问22，80端口区别。它发向外发的数据不是我们通过访问网页请求
而回应的数据包。

下面我们要禁止这些没有通过请求回应的数据包，统统把它们堵住掉。

iptables 提供了一个参数 是检查状态的，下面我们来配置下 22 和 80 端口，防止无效的数据包。

iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT

可以看到和我们以前使用的：
iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
多了一个状态判断。

同样80端口也一样， 现在删掉原来的2条规则，
iptables -L -n --line-number    这个是查看规则而且带上编号。我们看到编号就可以
删除对应的规则了。

iptables -D OUTPUT 1     这里的1表示第一条规则。

当你删除了前面的规则， 编号也会随之改变。看到了吧。

好，我们删除了前面2个规则，22端口还可以正常使用，说明没问题了

下面进行保存，别忘记了，不然的话重启就会还原到原来的样子。

service iptables save    进行保存。

Saving firewall rules to /etc/sysconfig/iptables:          [ OK ]
其实就是把刚才设置的规则写入到 /etc/sysconfig/iptables 文件中。
6、DNS端口53设置
下面我们来看看如何设置iptables来打开DNS端口，DNS端口对应的是53

大家看到我现在的情况了吧，只开放22和80端口， 我现在看看能不能解析域名。

hostwww.google.com    输入这个命令后，一直等待，说明DNS不通

出现下面提示 ：
;; connection timed out; no servers could be reached

ping 一下域名也是不通
[root@localhost ~pingwww.google.com
ping: unknown hostwww.google.com

我这里的原因就是 iptables 限制了53端口。

有些服务器，特别是Web服务器减慢，DNS其实也有关系的，无法发送包到DNS服务器导致的。

下面演示下如何使用 iptables 来设置DNS 53这个端口，如果你不知道 域名服务端口号，你

可以用命令 : grep domain /etc/services

[root@localhost ~grep domain /etc/services
domain          53/tcp                          # name-domain server
domain          53/udp
domaintime      9909/tcp                        # domaintime
domaintime      9909/udp                        # domaintime

看到了吧， 我们一般使用 udp 协议。

好了， 开始设置。。。

iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
这是我们 ping 一个域名，数据就是从本机出去，所以我们先设置 OUTPUT，
我们按照ping这个流程来设置。

然后 DNS 服务器收到我们发出去的包，就回应一个回来
iptables -A INPUT -p udp --sport 53 -j ACCEPT

同时还要设置
iptables -A INPUT -p udp --dport 53 -j ACCEPT
iptables -A OUTPUT -p udp --sport 53 -j ACCEPT

好了， 下面开始测试下， 可以用 iptables -L -n 查看设置情况，确定没有问题就可以测试了

[root@localhost ~iptables -L -n
Chain INPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0           tcp dpt:22
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0           tcp dpt:80
ACCEPT     udp -- 0.0.0.0/0            0.0.0.0/0           udp spt:53
ACCEPT     udp -- 0.0.0.0/0            0.0.0.0/0           udp dpt:53

Chain FORWARD (policy DROP)
target     prot opt source               destination

Chain OUTPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0           tcp spt:22 state ESTABLISHED
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0           tcp spt:80 state ESTABLISHED
ACCEPT     udp -- 0.0.0.0/0            0.0.0.0/0           udp dpt:53
ACCEPT     udp -- 0.0.0.0/0            0.0.0.0/0           udp spt:53

可以测试一下 是否 DNS 可以通过iptables 了。

[root@localhost ~hostwww.google.com
www.google.comis an alias forwww.l.google.com.
www.l.google.comis an alias for www-china.l.google.com.
www-china.l.google.com has address 64.233.189.104
www-china.l.google.com has address 64.233.189.147
www-china.l.google.com has address 64.233.189.99

正常可以解析 google 域名。

ping 方面可能还要设置些东西。

用 nslookup 看看吧

[root@localhost ~nslookup
>www.google.com
Server:         192.168.1.1
Address:        192.168.1.1#53

Non-authoritative answer:
www.google.comcanonical name =www.l.google.com.
www.l.google.com        canonical name = www-china.l.google.com.
Name:   www-china.l.google.com
Address: 64.233.189.147
Name:   www-china.l.google.com
Address: 64.233.189.99
Name:   www-china.l.google.com
Address: 64.233.189.104

说明本机DNS正常， iptables 允许53这个端口的访问。
7、iptables对ftp的设置
现在我开始对ftp端口的设置，按照我们以前的视频，添加需要开放的端口
ftp连接端口有2个 21 和 20 端口，我现在添加对应的规则。

[root@localhost rootiptables -A INPUT -p tcp --dport 21 -j ACCEPT
[root@localhost rootiptables -A INPUT -p tcp --dport 20 -j ACCEPT
[root@localhost rootiptables -A OUTPUT -p tcp --sport 21 -j ACCEPT
[root@localhost rootiptables -A OUTPUT -p tcp --sport 20 -j ACCEPT

好，这样就添加完了，我们用浏览器访问一下ftp,出现超时。

所以我刚才说 ftp 是比较特殊的端口，它还有一些端口是 数据传输端口，
例如目录列表， 上传 ，下载 文件都要用到这些端口。

而这些端口是 任意 端口。。。 这个 任意 真的比较特殊。

如果不指定什么一个端口范围， iptables 很难对任意端口开放的，
如果iptables允许任意端口访问， 那和不设置防火墙没什么区别，所以不现实的。

那么我们的解决办法就是 指定这个数据传输端口的一个范围。

下面我们修改一下ftp配置文件。

我这里使用vsftpd来修改演示，其他ftp我不知道哪里修改，大家可以找找资料。

[root@localhost rootvi /etc/vsftpd.conf

在配置文件的最下面 加入

pasv_min_port=30001
pasv_max_port=31000

然后保存退出。

这两句话的意思告诉vsftpd, 要传输数据的端口范围就在30001到31000 这个范围内传送。

这样我们使用 iptables 就好办多了，我们就打开 30001到31000 这些端口。

[root@localhost rootiptables -A INPUT -p tcp --dport 30001:31000 -j ACCEPT
[root@localhost rootiptables -A OUTPUT -p tcp --sport 30001:31000 -j ACCEPT

[root@localhost rootservice iptables save

最后进行保存， 然后我们再用浏览器范围下 ftp。可以正常访问

用个账号登陆上去，也没有问题，上传一些文件上去看看。

看到了吧，上传和下载都正常。。 再查看下 iptables 的设置

[root@localhost rootiptables -L -n
Chain INPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp dpt:22
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp dpt:21
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp dpt:20
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp dpts:30001:31000

Chain FORWARD (policy DROP)
target     prot opt source               destination

Chain OUTPUT (policy DROP)
target     prot opt source               destination
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp spt:22
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp spt:21
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp spt:20
ACCEPT     tcp -- 0.0.0.0/0            0.0.0.0/0          tcp spts:30001:31000

这是我为了演示ftp特殊端口做的简单规则，大家可以添加一些对数据包的验证
例如 -m state --state ESTABLISHED,RELATED 等等要求更加高的验证
	
	